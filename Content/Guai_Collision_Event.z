class Guai_Collision_Event : ZilchComponent
{
    [Property]
    var Life : Real = 50;
    [Property]
    var Attack : Real = 10;
    [Property]
    var Defence : Real = 20;
    [Property]
    var Experience : Integer = 100;
    [Property]
    var Money : Integer = 100;
    [Property]
    var PlayerName : String = "Player";
    
    var CONTINUE : Integer = 1;
    var PLAYER_DEAD : Integer = 2;
    var THIS_DEAD : Integer = 3;
    
    //if begin fight
    var Active : Boolean = false;
    
    //if begin fight
    var ExistAnimation : Boolean = false;
    
    var Battle_Animation : Cog = null;
    
    var OtherObject : Cog = null;
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Owner,Events.CollisionStarted,this.OnStart);
        Zero.Connect(this.Space,Events.LogicUpdate,this.OnLogicUpdate);
    }
    
    
    [Property]
    var Battle_Duration_Time : Real = 1;
    var Battle_Passed_Time : Real = 1.1;
    
    function OnLogicUpdate(event : UpdateEvent)
    {
        if (this.Active)
        {
            if (!this.ExistAnimation)
            {
                this.PlayAnimation();
            }
            if (this.Battle_Passed_Time >= this.Battle_Duration_Time)
            {
                this.BeginFight();
                this.Battle_Passed_Time = 0;
            }
            this.Battle_Passed_Time += event.Dt;
        }
    }
    
    function OnStart(event : CollisionEvent)
    {
        var otherObject = event.OtherObject;
        if (otherObject != null && otherObject.Name == this.PlayerName)
        {
            //sync the battle ,only when a guai have end the battle
            //next guai can battle with player
            if (otherObject.Move_Player.GetMoveSync() == false)
            return;
            this.Battle_Animation = this.Space.FindObjectByName("battle_animation");
            otherObject.Move_Player.SetMoveSync(false);
            this.OtherObject = otherObject;
            this.Active = true;
        }
    }
    
    function BeginFight()
    {
            var resultType = this.OneByOne();
            this.OtherObject.SPA_Show_To_Text.UpdataText();
            if (resultType == this.PLAYER_DEAD)
            {
                this.CloseAnimation();
                this.OtherObject.Show_Result.Show(false);
            }
            if (resultType == this.THIS_DEAD)
            {
                this.CloseAnimation();
                this.OtherObject.Show_Result.Show(true);
                this.AwardPlayer();
                this.Space.SPA_Controller.CheckUpLevel();
                this.OtherObject.SPA_Show_To_Text.UpdataText();
                this.Owner.Destroy();
            }
    } 
    
    function OneByOne() : Integer
    {
        var player_attack = this.Space.SPA_Controller.GetAttack();
        var player_defence = this.Space.SPA_Controller.GetDefence();
        var player_life = this.Space.SPA_Controller.GetLife();
        
        if (player_attack > this.Defence)
        {
            this.Life -= (player_attack-this.Defence);
        }
        
        if (this.Attack > player_defence)
        {
            player_life -= this.Attack - player_defence;
            this.Space.SPA_Controller.ChangeLife(player_life);
        }
        if (player_life <= 0 )
        {
            return this.PLAYER_DEAD;
        }
        if (this.Life <= 0)
        {
            return this.THIS_DEAD;
        }
        return this.CONTINUE;
    }
    
    
    function AwardPlayer()
    {
        var player_exp = this.Space.SPA_Controller.GetCurrentExperience();
        var player_money = this.Space.SPA_Controller.GetMoney();
        this.Space.SPA_Controller.ChangeMoney(player_money+this.Money);
        this.Space.SPA_Controller.ChangeCurrentExperience(player_exp+this.Experience);
    }
    
    function PlayAnimation()
    {
       this.Battle_Animation.Sprite.SpriteLayer = SpriteLayer.Bottom_8;
    }
    
    function CloseAnimation()
    {
       this.Battle_Animation.Sprite.SpriteLayer = SpriteLayer.DefaultSpriteLayer;
    }
}
